{"version":3,"sources":["components/Welcome.js","components/Player.js","components/App.js","serviceWorker.js","index.js"],"names":["Welcome","state","username","gameId","localStorage","getItem","this","setState","style","textAlign","action","id","type","placeholder","value","onChange","document","getElementById","handleUsernameInputChange","handleGameIdInputChange","onClick","e","preventDefault","setItem","props","history","push","handleGoButton","Component","withRouter","Player","user","cards","isOnline","App","handleCardAddButton","bind","dispatch","console","log","socket","emit","gamePath","window","location","pathname","split","io","connect","endpoint","query","on","userInfo","userCards","connectedUsers","renderPlayers","map","player","key","length","count","Boolean","hostname","match","initialState","socketId","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","Root","path","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35f77c78.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\n\n// Making the App component\nclass Welcome extends Component {\n  constructor() {\n    super()\n   \n    this.state = {\n      username: '',\n      gameId: ''\n    } \n  }\n\n  componentDidMount() {\n    const username = !!localStorage.getItem('username') ? localStorage.getItem('username') : ''\n    this.setState({'username': username})\n  }\n\n  render() {\n    const handleGoButton = (e) => {\n      e.preventDefault()\n      const username = document.getElementById('welcome__input--username').value\n      const gameId = document.getElementById('welcome__input--gameId').value\n\n      localStorage.setItem('username', username)\n      localStorage.setItem('gameId', gameId)\n      this.props.history.push(`/game/${gameId}`)\n    }\n\n    const handleUsernameInputChange = () => {\n      const username = document.getElementById('welcome__input--username').value\n      this.setState({'username': username})\n    }\n\n    const handleGameIdInputChange = () => {\n      const gameId = document.getElementById('welcome__input--gameId').value\n      this.setState({'gameId': gameId})\n    }\n\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h2>Welcome!</h2>\n        <form action=\"submit\">\n          <p>What's your name?</p>\n          <input\n            id=\"welcome__input--username\"\n            type=\"text\"\n            placeholder=\"Enter name\"\n            value={this.state.username}\n            onChange={() => handleUsernameInputChange()}\n          />\n          <p>Name a game:</p>\n          <input\n            id=\"welcome__input--gameId\"\n            type=\"text\"\n            placeholder=\"Enter game ID\"\n            value={this.state.gameId}\n            onChange={() => handleGameIdInputChange()}\n          />\n          <p>\n            <button onClick={(e) => handleGoButton(e)}>Go!</button>\n          </p>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Welcome)\n","import React from \"react\"\n\nfunction Player(props) {\n  return (\n    <div>\n      {props.user.username} | {props.user.cards} | {props.user.isOnline ? 'online' : 'offline'}\n    </div>\n  )\n}\n\nexport default Player\n","// import packages\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport io from 'socket.io-client'\n\nimport Player from './Player'\n\n// Making the App component\nclass App extends Component {\n  constructor() {\n    super()\n    this.handleCardAddButton = this.handleCardAddButton.bind(this)\n  }\n\n  handleCardAddButton() {\n    // Set Increment\n    this.props.dispatch({ type: \"INCREMENT_USER_CARDS\", value: 1 })\n    // Send Increment\n    console.log('gameId:', this.props.gameId)\n    this.socket.emit('handleCardAddButton', this.props.gameId, this.props.user)\n  }\n\n  componentDidMount() {\n    // Set gameID from path\n    const gamePath = window.location.pathname.split('/')[2]\n    this.props.dispatch({ type: \"SET_GAMEID\", gameId: gamePath })\n\n    // Socket connect\n    this.socket = io.connect(this.props.endpoint, { query: 'gameId='+gamePath })\n\n    // Set username\n    const username = !!localStorage.getItem('username') ? localStorage.getItem('username') : ''\n    this.props.dispatch({ type: \"SET_USERNAME\", username: username })\n\n    // Socket Login\n    this.socket.emit('login', gamePath, username)\n\n    // Update user info\n    this.socket.on('updateUserInfo', (userInfo) => {\n      if (this.props.user.username === userInfo.username) {\n        this.props.dispatch({ type: \"UPDATE_USER_INFO\", username: userInfo.username, id: userInfo.id, userCards: userInfo.userCards })\n      }\n    })\n\n    // Update connectedUsers\n    this.socket.on('connectedUsers', (connectedUsers) => {\n      this.props.dispatch({ type: \"SET_CONNECTEDUSERS\", value: connectedUsers })\n    })\n  }\n\n  render() {\n    // Render user info\n    const renderUser = () => <Player key={this.props.user.username} user={this.props.user} />\n\n    // Render other players\n    const renderPlayers = this.props.connectedUsers.map(player => {\n      if (player.username !== this.props.user.username) {\n        return (\n          <Player key={player.username} user={player} />\n        )\n      }\n      return false\n    })\n\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <div>\n          <span>You: {renderUser()}</span>\n        </div>\n        <hr />\n        <div>\n          <span>Other players:</span><span>{renderPlayers}</span>\n        </div>\n        <div>\n          Number of connected players: {this.props.connectedUsers.length}\n        </div>\n        <div>\n          <button onClick={() => this.handleCardAddButton()}>Add test</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    count: state.count,\n    endpoint: state.endpoint,\n    gameId: state.gameId,\n    connectedUsers: state.connectedUsers,\n    user: state.user\n  }\n}\n\nexport default connect(mapStateToProps)(withRouter(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"\n\nimport './index.css'\nimport Welcome from './components/Welcome'\nimport App from './components/App'\n\nimport * as serviceWorker from './serviceWorker'\n\n\n\n\n\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux'\n\nconst initialState = {\n  endpoint: 'localhost:4001/game',\n  gameId: '',\n  connectedUsers: [],\n  user: {\n    socketId: '',\n    username: '',\n    cards: 0\n  },\n  count: 10\n}\n\nfunction reducer(state = initialState, action) {\n  switch(action.type) {\n    case 'INCREMENT':\n      return {\n        ...state,\n        count: state.count + 1\n      }\n    case 'SET_GAMEID':\n      return {\n        ...state,\n        gameId: action.gameId\n      }\n    case 'SET_USERNAME':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          username: action.username\n        }\n      }\n    case 'INCREMENT_USER_CARDS':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          cards: state.user.cards + 1\n        }\n      }\n    case 'SET_CONNECTEDUSERS':\n      return {\n        ...state,\n        connectedUsers: action.value\n      }\n    case 'UPDATE_USER_INFO':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          id: action.id,\n          username: action.username,\n          cards: action.userCards\n        }\n      }\n\n\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\n\n\n\n\n\nconst Root = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route path=\"/game/:gameId\">\n            <App />\n          </Route>\n          <Route path=\"/\">\n            <Welcome />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  )\n}\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}